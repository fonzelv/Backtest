library(quantstrat)
library(ggplot2)
library(dplyr)
library(tidyr)
library(TTR)

########## LUXOTTICA MACD LONG ONLY WITH OPTIMIZATION ##########

# 1. Setting up the strategy --------------------------------------------------

# 1A. Currency, timezone, asset class

Sys.setenv(TZ = "CET")
currency("EUR")
stock("EL.PA", currency = "EUR", multiplier = 1)

# 1B. Initdate, from, to

initdate <- "2020-01-01" # Date when you initialise the account, port and strategy
from <- initdate
to <- "2021-02-23"

#1C. tradesize, initial equity, MA lenght and optimization range
tradesize <- 10000
initeq <- 100000

.fast = 10
.slow = 30

.FastSMA = (1:30)
.SlowSMA = (1:30)

# 1D. Getting symbols

getSymbols(Symbols = "EL.PA", 
           src = "yahoo", 
           from = from, 
           to = to, index.class=c("POSIXt","POSIXct"))

# 1E. Naming the Account, Portfolio and Strategy

strategy.st <- portfolio.st <- account.st <- "firststrat"

rm.strat(portfolio.st)
rm.strat(account.st)

# 1F. Initialising the Account, Portfolio, Strategy and Orders 


initPortf(name = portfolio.st, 
          symbols = "EL.PA",
          initDate = initdate,
          currency = "EUR")

initAcct(account.st, 
         portfolios = portfolio.st,
         initDate = initdate, 
         initEq = initeq,
         currency = "EUR")

initOrders(portfolio = portfolio.st,
           Symbols = "EL.PA",
           initDate = initdate)

strategy(strategy.st,
         store = TRUE)

#2. Setting up an indicator --------------------------------------------------

add.indicator(strategy.st,
              name = "SMA",
              arguments = list(x = quote(Cl(mktdata)),
                               n = .fast),
              label = "Fast")

add.indicator(strategy.st,
              name = "SMA",
              arguments = list(x = quote(Cl(mktdata)),
                               n = .slow),
              label = "Slow")

# 3. Setting up signals --------------------------------------------------


add.signal(strategy = strategy.st,
           name="sigCrossover",
           arguments = list(columns = c("Fast", "Slow"),
                            relationship = "gt"),
           label = "golong")

add.signal(strategy = strategy.st,
           name = "sigCrossover",
           arguments = list(columns = c("Fast", "Slow"),
                            relationship = "lt"),
           label = "goexit")


#4. Adding rules --------------------------------------------------    
#open
add.rule(strategy.st, name='ruleSignal', 
         arguments = list(sigcol="golong", 
                          sigval=TRUE, 
                          orderqty=tradesize, 
                          ordertype="stoplimit", 
                          orderside="long", 
                          tradeSize = tradesize, 
                          maxSize = tradesize,
                          replace=FALSE, 
                          osFUN = IKTrading::osMaxDollar), 
         type="enter", path.dep=TRUE)


add.rule(strategy.st, 
         name = 'ruleSignal',
         arguments = list(sigcol = "goexit", 
                          sigval = TRUE, 
                          orderqty = "all",
                          ordertype = "stoplimit", 
                          orderside = "long",
                          replace=FALSE),
         type = "exit")

#5. Adding distribution  --------------------------------------------------   

add.distribution(strategy.st,
                 paramset.label ="SMA",
                 component.type = "indicator",
                 component.label = "Fast",
                 variable = list(n = .FastSMA),
                 label = "nFast")

add.distribution(strategy.st,
                 paramset.label = "SMA",
                 component.type = "indicator",
                 component.label = "Slow",
                 variable = list(n = .SlowSMA),
                 label = "nSlow")

add.distribution.constraint(strategy.st,
                            paramset.label = "SMA",
                            distribution.label.1 = "nFast",
                            distribution.label.2 = "nSlow",
                            operator = "<",
                            label = "SMA")


# 6. Running the strategy --------------------------------------------------

# Use applyStrategy() to apply your strategy. Save this to out
results <- apply.paramset(strategy.st, paramset.label = "SMA", portfolio.st = portfolio.st, account.st = account.st, nsamples = 0)

updatePortf(strategy.st)
updateAcct(strategy.st)
updateEndEq(strategy.st) 

tS <- results$tradeStats
idx <- order(tS[,1],tS[,2])
tS <- tS[idx,]

write.csv(tS,"/Users/alessandro/Desktop/Scraping/noidee.csv")




